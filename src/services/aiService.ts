// src/services/aiService.ts

export type AIEnhanceField = "summary" | "experience";

export type AIEnhanceRequest = {
  field: AIEnhanceField;
  text: string;
  context?: string;
  meta?: {
    role?: string;
    company?: string;
    period?: string;
  };
};

export type AIEnhanceResponse = {
  improvedText: string;
  suggestions?: string[];
};

import { getActiveGeminiKey } from "../utils/settings";

const MODEL = "gemini-2.0-flash";
const GEMINI_ENDPOINT = (apiKey: string) =>
  `https://generativelanguage.googleapis.com/v1beta/models/${MODEL}:generateContent?key=${apiKey}`;

const GENERATION_CONFIG = {
  temperature: 0.35,
  topK: 40,
  topP: 0.95,
  maxOutputTokens: 600,
};

export function buildGeminiPrompt(req: AIEnhanceRequest): string {
  const TEXT = (req.text || "").trim();
  const CONTEXT = (req.context || "").trim();

  const commonGuard = `Regras gerais:
- Escreva em PT-BR (Brasil).
- N√£o invente fatos nem certificados.
- Seja espec√≠fico e objetivo.`;

  if (req.field === "summary") {
    return `
${commonGuard}

Voc√™ √© um redator de curr√≠culos (BR-PT) especialista em torn√°-los objetivos e competitivos para vagas de tecnologia.

TAREFA
- Reescreva o RESUMO PROFISSIONAL abaixo para ficar claro, direto, convincente e alinhado ao objetivo de carreira.
- Mantenha 450‚Äì500 caracteres (2‚Äì3 frases).
- Sem clich√™s vazios (‚Äúproativo‚Äù, ‚Äúdin√¢mico‚Äù), sem fluff, sem inventar fatos.
- Destaque impacto, tecnologias e diferenciais. Use verbos de a√ß√£o.
- Se houver CONTEXTO da vaga, priorize termos e requisitos compat√≠veis.

ENTRADA (do usu√°rio)
<<<RESUMO>>>
${TEXT}
</RESUMO>

<<<CONTEXTO (opcional)>>>
${CONTEXT}
</CONTEXTO>

SA√çDA
- Apenas o texto final do resumo, em PT-BR.
- 1 par√°grafo, 450‚Äì500 caracteres.
`.trim();
  }

  // EXPERIENCE
  const role = req.meta?.role ?? "";
  const company = req.meta?.company ?? "";
  const period = req.meta?.period ?? "";

  return `
${commonGuard}

Voc√™ √© um redator de curr√≠culos (BR-PT) especializado em transformar descri√ß√µes de experi√™ncia em bullets de alto impacto.

TAREFA
- Reescreva a EXPERI√äNCIA abaixo em 3 a 5 bullets no formato:
  ‚Ä¢ Verbo no passado + a√ß√£o + tecnologia(s) + impacto/resultado (n√∫meros, %, tempo, R$ quando poss√≠vel).
- Use o m√©todo STAR (Situa√ß√£o, Tarefa, A√ß√£o, Resultado) de forma concisa.
- Evite ‚Äúrespons√°vel por‚Äù. Comece cada bullet com verbo forte.
- N√£o invente fatos; caso n√£o existam m√©tricas, foque em escopo/volume (ex.: ‚Äú+X telas‚Äù, ‚ÄúY usu√°rios‚Äù, ‚ÄúZ microservi√ßos‚Äù).

ENTRADA
<<<CARGO | EMPRESA | PER√çODO>>>
${role} | ${company} | ${period}
</CABECALHO>

<<<DESCRI√á√ÉO ORIGINAL>>>
${TEXT}
</DESCRI√á√ÉO ORIGINAL>

<<<ALINHAMENTO √Ä VAGA (opcional)>>>
${CONTEXT}
</ALINHAMENTO>

SA√çDA
- Lista de bullets (‚Ä¢ ...), 3‚Äì5 itens, uma linha por bullet, PT-BR.
`.trim();
}

function extractTextFromCandidates(json: any): string {
  try {
    const parts = json?.candidates?.[0]?.content?.parts;
    if (!Array.isArray(parts)) return "";
    const joined = parts
      .map((p: any) => (typeof p?.text === "string" ? p.text : ""))
      .join("\n")
      .trim();

    // Remove cercas de c√≥digo caso o modelo retorne em bloco
    return joined.replace(/^```[\s\S]*?\n|```$/g, "").trim();
  } catch {
    return "";
  }
}

function localFallback(req: AIEnhanceRequest): AIEnhanceResponse {
  const txt = (req.text || "").trim();
  const cap = txt
    ? txt[0].toUpperCase() + txt.slice(1)
    : "Texto n√£o informado.";

  const base: AIEnhanceResponse = {
    improvedText: req.field === "experience" ? `‚Ä¢ ${cap}` : cap,
    suggestions: [
      "Inclua impacto com n√∫meros (%, R$, tempo, volume).",
      "Use verbos de a√ß√£o no in√≠cio dos bullets/frases.",
      "Evite 'respons√°vel por'; descreva a a√ß√£o e o resultado.",
    ],
  };

  if (req.field === "experience") {
    base.suggestions?.unshift(
      "Modele no estilo STAR (Situa√ß√£o, Tarefa, A√ß√£o, Resultado)."
    );
  }

  return base;
}

export async function enhanceText(
  req: AIEnhanceRequest
): Promise<AIEnhanceResponse> {
  console.log('üîß Iniciando enhanceText...');
  
  // Ordem de prioridade para obter a chave:
  // 1. localStorage (configura√ß√£o manual)
  // 2. import.meta.env (arquivo .env)  
  // 3. Chave hardcoded como fallback
  
  let apiKey = "";
  
  // M√©todo 1: localStorage
  try {
    const storedKey = localStorage.getItem("cvbuilder:gemini_api_key");
    if (storedKey) {
      apiKey = storedKey;
      console.log('üîë Usando chave do localStorage: ‚úÖ');
    }
  } catch (e) {}
  
  // M√©todo 2: .env via import.meta.env  
  if (!apiKey) {
    try {
      const envKey = import.meta.env.VITE_GEMINI_API_KEY;
      if (envKey) {
        apiKey = envKey;
        console.log('üîë Usando chave do .env: ‚úÖ');
      }
    } catch (e) {}
  }
  
  // M√©todo 3: Fallback hardcoded
  if (!apiKey) {
    apiKey = "AIzaSyCQvuBVCNT9zv_A7cb2QhT2LyX7u7eASms";
    console.log('üîë Usando chave hardcoded (fallback): ‚úÖ');
  }
  
  console.log('üîë Chave final configurada:', apiKey ? '‚úÖ PRONTA' : '‚ùå FALHA');

  const prompt = buildGeminiPrompt(req);

  try {
    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 20_000); // 20s

    const resp = await fetch(GEMINI_ENDPOINT(apiKey), {
      method: "POST",
      signal: controller.signal,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        contents: [{ role: "user", parts: [{ text: prompt }] }],
        generationConfig: GENERATION_CONFIG,
      }),
    });

    clearTimeout(timeout);

    if (!resp.ok) {
      // status 429/4xx/5xx ‚Üí fallback
      return localFallback(req);
    }

    const data = await resp.json();
    const text = extractTextFromCandidates(data);
    const improved = text || req.text || "";

    // Se o modelo retornar demais, d√° uma leve aparada
    const cleaned =
      req.field === "summary" ? improved.trim().slice(0, 700) : improved.trim();

    // Sugest√µes √∫teis adicionais
    const suggestions =
      req.field === "summary"
        ? [
            "Mantenha ~500 caracteres e destaque 2‚Äì3 diferenciais t√©cnicos.",
            "Evite adjetivos gen√©ricos; prefira resultados e tecnologias.",
          ]
        : [
            "Cada bullet: Verbo + A√ß√£o + Tecnologia + Resultado.",
            "Inclua volume: n¬∫ de usu√°rios, telas, endpoints, etc.",
          ];

    return { improvedText: cleaned, suggestions };
  } catch (e) {
    // Timeout / rede / parse ‚Üí fallback
    return localFallback(req);
  }
}

/* ========================================================================
 * Exemplo de uso:
 * ----------------------------------------------------------------------
 * const res = await enhanceText({
 *   field: "experience",
 *   text: exp.description,
 *   context: "Vaga foco React + TypeScript em e-commerce",
 *   meta: { role: exp.role, company: exp.company, period: exp.period }
 * });
 * actions.updateExperience(exp.id, { description: res.improvedText });
 * ====================================================================== */
